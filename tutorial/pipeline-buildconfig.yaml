apiVersion: v1
kind: BuildConfig
metadata:
  name: pipeline
  labels:
    name: pipeline
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "myapp", "namespace": "", "kind": "DeploymentConfig"}]'
spec:
  runPolicy: Serial
  source:
    type: None
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        node('maven') {
          stage 'build-on-dev'
            openshiftBuild(namespace: 'demo-dev', buildConfig: 'myapp', showBuildLogs: 'true')
          stage 'deploy-on-dev'
            openshiftDeploy(namespace: 'demo-dev', deploymentConfig: 'myapp')
            openshiftScale(namespace: 'demo-dev',deploymentConfig: 'myapp',replicaCount: '2')
          stage 'deploy-on-test'
            openshiftTag(namespace: 'demo-dev', sourceStream: 'myapp', sourceTag: 'latest', destinationStream: 'myapp', destinationTag: 'latest-test')
            openshiftDeploy(namespace: 'demo-test', deploymentConfig: 'myapp')
            openshiftScale(namespace: 'demo-test',deploymentConfig: 'myapp',replicaCount: '2')
          stage 'jmeter-on-test'  
            git url: "https://github.com/podspace/pipeline-demo", branch: "kitchensink"
            sh "cd kitchensink && mvn -Pjenkins -Dtest.webservice.host=myapp.demo-test.svc.cluster.local -Dtest.webservice.port=8080 verify"
          stage 'deploy-on-prod'    
            openshiftTag(namespace: 'demo-dev', sourceStream: 'myapp', sourceTag: 'latest', destinationStream: 'myapp', destinationTag: 'latest-prod')
            openshiftDeploy(namespace: 'demo-prod', deploymentConfig: 'myapp')
            openshiftScale(namespace: 'demo-prod', deploymentConfig: 'myapp', replicaCount: '4')
        }
  output:
  resources:
  postCommit:
